<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fanny&#39;s Blog on Fanny&#39;s Blog</title>
    <link>https://fanny.github.io/blog/</link>
    <description>Recent content in Fanny&#39;s Blog on Fanny&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 28 Apr 2019 22:30:24 -0300</lastBuildDate>
    <atom:link href="/blog/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Dockerizando Minha Aplicação Apollo</title>
      <link>https://fanny.github.io/blog/2019/dockerizando-minha-aplicacao-apollo/</link>
      <pubDate>Sun, 28 Apr 2019 22:30:24 -0300</pubDate>
      
      <guid>https://fanny.github.io/blog/2019/dockerizando-minha-aplicacao-apollo/</guid>
      <description>

&lt;p&gt;Além de computação, eu amo música, e em todo post meu, vou te recomendar um álbum/música de artista que estou conhecendo ou que já ouvi e gostei muito, tá bem?&lt;/p&gt;

&lt;p&gt;Enquanto eu escrevo, esse post, estou ouvindo uma música do &lt;a href=&#34;https://pt.wikipedia.org/wiki/Iron_%26_Wine&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Iron &amp;amp; Wine&lt;/a&gt;, a &amp;ldquo;Such Great Heights&amp;rdquo;, eles tem um estilo de folk rock, muito amorzinho. A primeira vez que escutei ele, foi em uma &lt;a href=&#34;https://www.youtube.com/watch?v=H732zJgRDt4&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;cena de crepúsculo&lt;/a&gt;, quando eu ouvi eu senti uma paz, uma sensação boa de aconchego, como se eu quisesse abraçar eu mesma, e tudo estivesse bem, sabe? Eles são muito bons pra ouvir quando você quer ter um momento de conexão consigo mesmo, então fica aí a sugestão.&lt;/p&gt;

&lt;iframe src=&#34;https://open.spotify.com/embed/track/6kLqKntp2x4QVXHwqLHMYm&#34; width=&#34;300&#34; height=&#34;380&#34; frameborder=&#34;0&#34; allowtransparency=&#34;true&#34; allow=&#34;encrypted-media&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;Durante meu processo de aprendizagem do docker, eu encontrei um &lt;a href=&#34;https://dev.to/azure/docker---from-the-beginning-part-i-28c6&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;tutorial fantástico&lt;/a&gt; que me ajudou a entender muitos dos conceitos que eu tinha dificuldade. Então, eu decidi traduzi-lo pra que outras pessoas também pudessem ter essa mesma experiência, além disso, alguns amigos que fazem projeto comigo, não entendiam a configuração de docker que eu fiz, como uma forma de ajudá-los, decidi criar um tutorial inspirado nesse primeiro, que conseguisse cobrir todos os tópicos e funcionalidades usadas.&lt;/p&gt;

&lt;p&gt;Muito obrigada, &lt;a href=&#34;https://dev.to/softchris&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;@softchris&lt;/a&gt;, você fez um trabalho íncrivel! &amp;lt;3&lt;br /&gt;
&lt;em&gt;Thank you, so much, &lt;a href=&#34;https://dev.to/softchris&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;@softchris&lt;/a&gt;, you did an incredible job! &amp;lt;3&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Então, vamos lá.&lt;/p&gt;

&lt;p&gt;Neste artigo, iremos cobrir os seguintes tópicos:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;O que é Docker e por quê usá-lo?&lt;/strong&gt; Esse tópico é provavelmente um dos mais importantes do artigo, por quê o Docker? Por quê não usar outras tecnologias? Tentarei explicar o quê é docker e em que ele consiste.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Criando nossa aplicação&lt;/strong&gt;. Vamos criar um simples hello-world no apollo-server.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dockerizando nossa aplicação&lt;/strong&gt;. Vamos dockerizar uma aplicação para mostrar o que entendemos e podemos usar com os principais conceitos do docker.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Gerenciando o container&lt;/strong&gt;. Agora é muito fácil subir um container, mas também precisamos aprender a gerenciá-lo, já que não queremos que ele fique executando pra sempre.&lt;/p&gt;

&lt;p&gt;Essa é a primeira parte da série, nos próximos posts pretendemos abordar, volumes, linkamento, microsserviços, e orquestração.&lt;/p&gt;

&lt;h2 id=&#34;por-quê-usar-o-docker&#34;&gt;Por quê usar o docker?&lt;/h2&gt;

&lt;p&gt;O docker te ajuda a criar um ambiente reproduzível. Você consegue especificar um Sistema Operacional(S.O) específico, a versão exata de diferentes bibliotecas, diferentes variáveis de ambiente e seus valores, dentre outras coisas. E o que é mais importante, você consegue executar sua aplicação isoladamente dentro desse ambiente.&lt;/p&gt;

&lt;h2 id=&#34;e-por-quê-você-iria-querer-isso&#34;&gt;E por quê você iria querer isso?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Integração do time com novos desenvolvedores&lt;/strong&gt;.  A maioria dos times pode passar pelo processo de integrar um desenvolvedor a um projeto que já existe, e pode ser um processo traumático  para ele ter que instalar SDK’s, ferramentas de desenvolvimento, banco de dados,adicionar permissões, muitas vezes chegando a levar semanas.&lt;br /&gt;
&lt;strong&gt;Ambientes com a mesma configuração&lt;/strong&gt;. É muito comum querer reproduzir o ambiente de produção no de desenvolvimento, muitas vezes, quando a configuração não é a mesma, pode ser difícil mapear o motivo dos erros, porque o problema pode ter sido pelo ambiente de execução. Usando o Docker, você pode criar um ambiente DEV, STAGING e PRODUÇÃO, todos com as mesmas definições.&lt;br /&gt;
&lt;strong&gt;O famoso jargão &amp;ldquo;Funciona na minha máquina&amp;rdquo;&lt;/strong&gt;. O docker criar contêineres isolados, onde você especifica exatamente o que eles devem conter, você pode enviar esses containers aos clientes e eles irão funcionar da mesma forma que na sua máquina de desenvolvimento.&lt;/p&gt;

&lt;h2 id=&#34;o-que-é-o-docker&#34;&gt;O que é o docker?&lt;/h2&gt;

&lt;p&gt;Certo, já temos mencionado boas razões para usar o docker, mas precisamos ir um pouco mais a fundo sobre o que o docker é. Nós definimos que ele nos permite especificar um ambiente como um SO, como encontrar e executar apps e as variáveis necessárias, mas o que o docker tem além disso que podemos saber?&lt;/p&gt;

&lt;p&gt;Docker por si só, cria pacotes chamados containers, que contém tudo o que você precisa pra rodar sua aplicação. Cada container tem sua própria memória, CPU e rede e não depende de um sistema operacional ou kernel. A primeira coisa que vem em mente quando citamos containers, são as maquinas virtuais, mas o docker difere-se na maneira com a qual ele compartilha os recursos. Docker usa o chamado “sistema de arquivos em camadas” que permite que os containers compartilhem partes comuns e o resultado final é que os containers são muito menos dependendentes de recursos no sistema host do que uma máquina virtual.&lt;/p&gt;

&lt;p&gt;Resumindo, os containers do docker, contém tudo que você precisa pra executar uma aplicação, incluindo o código fonte que você escreveu. Containers também são unidades leves e seguras no seu sistema, Isso torna fácil a criação de vários microserviços que são escritos em diferentes linguagens de programação e que estão usando diferentes versões da mesma biblioteca e do mesmo SO.&lt;/p&gt;

&lt;p&gt;Se você está curioso sobre como exatamente funciona o Docker, eu recomendo fortemente que você dê uma olhada nos seguintes links: &lt;a href=&#34;http://aufs.sourceforge.net/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;layered file system&lt;/a&gt; e a blibioteca &lt;a href=&#34;https://github.com/opencontainers/runc&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;runc&lt;/a&gt; e também a &lt;a href=&#34;https://en.wikipedia.org/wiki/Docker_%28software%29&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;wikipedia&lt;/a&gt; tem uma boa visão geral do Docker.&lt;/p&gt;

&lt;h2 id=&#34;docker-em-ação&#34;&gt;Docker em ação&lt;/h2&gt;

&lt;p&gt;Hummm, certo, nós já vimos o que é o Docker e seus benefícios, nós também entendemos que o que executa nossa aplicação é chamado de container. Mas como nós fazemos isso? Bem, nós começamos definindo um arquivo de descrição, chamado de &lt;em&gt;DockerFile&lt;/em&gt;. Neste &lt;em&gt;DockerFile&lt;/em&gt;, nós especificamos tudo que precisamos em termos de SO, variáveis de ambiente, e como conseguimos colocar nossa aplicação lá.&lt;/p&gt;

&lt;p&gt;Para fazer isso, seguimos os seguintes passos:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Criação da aplicação&lt;/strong&gt;, nós iremos criar um api servida pelo apollo.&lt;br /&gt;
&lt;strong&gt;Criação de um dockerfile&lt;/strong&gt;, um arquivo de texto que descreve como o docker deve construir nossa aplicação.&lt;br /&gt;
&lt;strong&gt;Construção de uma imagem&lt;/strong&gt;, antes de levantar e executar nossa aplicação, é necessário ter uma imagem, você entenderá o motivo.&lt;br /&gt;
&lt;strong&gt;Criação de um container&lt;/strong&gt;, esse é o passo final onde nós vemos nossa aplicação levantada e executando, nós criaremos um container, a partir da imagem criada no passo anterior.&lt;/p&gt;

&lt;h2 id=&#34;criando-a-aplicação-do-apollo-server&#34;&gt;Criando a aplicação do apollo-server&lt;/h2&gt;

&lt;p&gt;Para agilizar o tutorial, vou mostrar apenas a configuração que segui, que foi do &lt;a href=&#34;https://www.apollographql.com/docs/apollo-server/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;getting-started do Apollo-Server&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;criando-um-dockerfile&#34;&gt;Criando um dockerfile&lt;/h2&gt;

&lt;p&gt;Certo, o próximo passo é definir nosso dockerfile. Esse arquivo atua como um manifest, mas também como um arquivo de instrução de como fazer o build, em que nós podemos levantar nossa aplicação e executar. Ok, então o que nós precisamos para ter isso?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;copiar&lt;/strong&gt; todos os arquivos do nosso app para o container do docker&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;instalar&lt;/strong&gt; as dependências&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;expor uma porta&lt;/strong&gt;, que possa ser acessada de fora do container&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;instruir&lt;/strong&gt;, o container sobre como iniciar nossa aplicação&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Em aplicações mais complexas, nós podemos precisar fazer outras coisas, como setar variáveis de ambiente, ou credenciais para um banco de dados, usar &lt;code&gt;seeds&lt;/code&gt; para popular nosso banco de dados. Mas para agora, nós só precisamos das coisas que descrevemos acima, Então vamos expressar isso no nosso Dockerfile:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM node:latest

WORKDIR /server

COPY . .

ENV PORT 5000

RUN npm install

EXPOSE $PORT

ENTRYPOINT [&amp;quot;npm&amp;quot;, &amp;quot;start&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;FROM&lt;/strong&gt; Este comando seleciona a imagem do sistema operacional, a partir do Docker Hub. &lt;a href=&#34;https://hub.docker.com/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Docker Hub&lt;/a&gt; um repositório global que contém imagens que podemos baixar localmente. No nosso caso, podemos escolher uma imagem baseada no Ubuntu que tem o node instalado, e nós podemos especificar que queremos a última versão, usando a tag &lt;code&gt;:latest&lt;/code&gt;&lt;br /&gt;
&lt;strong&gt;WORKDIR&lt;/strong&gt; Isso simplesmente significa que nós estamos configurando um diretório de trabalho. Isso é uma maneira de definir onde nossos arquivos ficarão no container.&lt;br /&gt;
&lt;strong&gt;COPY&lt;/strong&gt; Aqui nós copiamos os arquivos do diretório atual, para o diretório que acabamos de criar com o &lt;code&gt;WORKDIR&lt;/code&gt;.&lt;br /&gt;
&lt;strong&gt;RUN&lt;/strong&gt; Isso executa um comando no terminal, no nosso caso, queremos instalar as bibliotecas necessárias para construir nosso apollo-server, por isso, usamos o &lt;code&gt;npm install&lt;/code&gt;.&lt;br /&gt;
&lt;strong&gt;EXPOSE&lt;/strong&gt; Isso significa que estamos expondo uma porta, e é através dessa porta que vamos nos comunicar com o nosso container.&lt;br /&gt;
&lt;strong&gt;ENTRYPOINT&lt;/strong&gt; Isso representa o comando que precisamos executar para inicializar nossa aplicação, os comandos precisam ser especificados como um array, no nosso caso, isso será traduzido como &lt;code&gt;npm start&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;construindo-uma-imagem&#34;&gt;Construindo uma imagem&lt;/h2&gt;

&lt;p&gt;Há dois passos que precisamos implementar para levantar e executar nosso container, eles são:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Criação de uma imagem&lt;/strong&gt;, com a ajuda do &lt;code&gt;Dockerfile&lt;/code&gt; e do comando &lt;code&gt;docker build&lt;/code&gt; nós criaremos uma imagem.&lt;br /&gt;
&lt;strong&gt;Execução do container&lt;/strong&gt;, Agora que temos uma imagem, precisamos criar um container.&lt;/p&gt;

&lt;p&gt;Antes de tudo, você deve estar se perguntando, certo, mas o que é uma imagem, porque eu preciso dela?&lt;/p&gt;

&lt;p&gt;Como minha amiga, &lt;a href=&#34;https://github.com/thayannevls&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;@thayannevls&lt;/a&gt; diz:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Pense na imagem como uma classe, e o container como um objeto em Orientação a Objeto(OO)&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Certo, vamos analisar essa frase, por que a imagem representa uma classe? Quando falamos em classes, pensamos num template no qual definimos atributos e comportamentos da nossa entidade. Uma imagem, é definida pelo &lt;code&gt;Dockerfile&lt;/code&gt;, que como vimos, é onde instruímos, como o docker deve fazer o build, muitas vezes só usamos as imagens prontas que estão definidas no repositório do docker, o Dockerhub, e as vezes pegamos imagens prontas e fazemos modificações, como é o nosso caso. E o nosso container, é justamente a nossa imagem em execução, daí a analogia com os objetos.&lt;/p&gt;

&lt;p&gt;Primeiro de tudo, vamos criar nossa imagem com o seguinte comando:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker build -f .docker/node.dockerfile .&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A instrução acima cria uma imagem. O &lt;code&gt;.&lt;/code&gt; no final é importante, serve para especficar que o diretório raiz da app, é o que estamos atualmente, a opção &lt;code&gt;-f&lt;/code&gt; dockerfile está localizado, nesse caso, no diretório &lt;code&gt;.docker/&lt;/code&gt;. Se você não tiver a imagem definida no &lt;code&gt;Dockerfile&lt;/code&gt;(usando o comando FROM, linha 1), no nosso caso, a do node, o docker irá primeiro baixá-la a partir do dockerhub, e seu terminal parecerá com isso.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;OBS: Caso o dockerfile estivesse no diretório atual, executaríamos o seguinte:&lt;/em&gt;
&lt;code&gt;docker build .&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/KTt1Hro.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;O que você está vendo, é como o docker está baixando a imagem do node a partir do dockerhub, e então cada comando está sendo executado, WORKDIR, RUN, e os outros. No final, nós vemos &amp;ldquo;sucessfuly built&amp;rdquo; que é um ínicio de que tudo foi construído com sucesso. Vamos dar uma olhada na nossa imagem com:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker images&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/rw2cyVO.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;criando-um-container&#34;&gt;Criando um container&lt;/h2&gt;

&lt;p&gt;O próximo passo é pegar nossa imagem e construir um container a partir dela. Um container é essa peça isolada que executa nossa aplicação dentro dele. Nós construimos um container usando o comando docker run. O comando completo se parece com:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker run ID_IMAGE&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Mas isso não é o suficiente, precisamos mapear a nossa porta interna à externa, da nossa máquina host. Lembre-se que esse é um app que queremos interagir atraves do nosso browser. Nós podemos mapear usando a flag -p&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-p [external port]:[internal port]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Agora o comando completo, se parece com:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker run -p 8000:5000 ID_IMAGE&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Ok, executando esse comando significa que nós conseguiremos visitar nosso container através da url &lt;a href=&#34;http://localhost:8000&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;http://localhost:8000&lt;/a&gt;, &lt;code&gt;8000&lt;/code&gt; é a nossa porta externa, lembre-se que o comando acima mapea 8000 para a ponta interna 3000. Bora ver, abrindo o browser temos:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/N780k5Q.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;É isto, temos nossa app no ar, pipous! :D&lt;/p&gt;

&lt;h2 id=&#34;referências-links-para-estudo&#34;&gt;Referências &amp;amp; Links para estudo&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://docker-curriculum.com/#getting-started&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://docker-curriculum.com/#getting-started&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/get-started/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://docs.docker.com/get-started/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dev.to/softchris/5-part-docker-series-beginner-to-master-3m1b&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://dev.to/softchris/5-part-docker-series-beginner-to-master-3m1b&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About Hugo</title>
      <link>https://fanny.github.io/blog/about/</link>
      <pubDate>Wed, 09 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://fanny.github.io/blog/about/</guid>
      <description>&lt;p&gt;Hugo is the &lt;strong&gt;world’s fastest framework for building websites&lt;/strong&gt;. It is written in Go.&lt;/p&gt;

&lt;p&gt;It makes use of a variety of open source projects including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/russross/blackfriday&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://github.com/russross/blackfriday&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/alecthomas/chroma&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://github.com/alecthomas/chroma&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/muesli/smartcrop&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://github.com/muesli/smartcrop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/cobra&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://github.com/spf13/cobra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/viper&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://github.com/spf13/viper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Learn more and contribute on &lt;a href=&#34;https://github.com/gohugoio&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>